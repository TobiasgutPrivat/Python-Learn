# -*- coding: utf-8 -*-
"""
2 heartbeats signal
"""

import matplotlib.pyplot as plt

ecg2 = [
    0.0014, 0.0014, 0.0028, 0.0042, 0.0056, 0.0071, 0.0237, 0.0557, 0.1029, 0.1501, 0.1973, 0.2446, 
    0.2918, 0.3095, 0.2977, 0.2564, 0.2150, 0.1737, 0.1324, 0.0911, 0.0498, 0.0219, 0.0075, 0.0066, 
    0.0056, 0.0047, 0.0038, 0.0028, 0.0019, 0.0009, -0.0477, -0.1441, -0.1542, -0.0305, 0.2271, 
    0.4847, 0.7424, 0.7915, 0.6322, 0.2644, -0.1034, -0.4713, -0.5766, -0.4260, -0.1395, 0.0006, 
    0.0018, 0.0027, 0.0036, 0.0045, 0.0054, 0.0062, 0.0071, 0.0080, 0.0089, 0.0098, 0.0107, 0.0116, 
    0.0125, 0.0134, 0.0143, 0.0152, 0.0161, 0.0243, 0.0400, 0.0630, 0.0860, 0.1090, 0.1320, 0.1550, 
    0.1626, 0.1550, 0.1320, 0.1090, 0.0860, 0.0630, 0.0400, 0.0232, 0.0127, 0.0085, 0.0042, 0.0014, 
    0, 0, 0, 0, 0.0001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0015, 0.0016, 0.0028, 0.0043, 0.0056, 
    0.0071, 0.0237, 0.0553, 0.1029, 0.1503, 0.1973, 0.2446, 0.2918, 0.3095, 0.2982, 0.2564, 0.2150, 
    0.1737, 0.1324, 0.0911, 0.0498, 0.0217, 0.0075, 0.0066, 0.0056, 0.0047, 0.0038, 0.0028, 0.0019, 
    0.0009, -0.0477, -0.1441, -0.1542, -0.0305, 0.2261, 0.4847, 0.7424, 0.8021, 0.6322, 0.2644, 
    -0.1034, -0.4712, -0.5766, -0.4195, -0.1395, 0.0009, 0.0018, 0.0027, 0.0036, 0.0045, 0.0054, 
    0.0062, 0.0071, 0.0080, 0.0089, 0.0098, 0.0107, 0.0116, 0.0125, 0.0134, 0.0143, 0.0152, 0.0161, 
    0.0259, 0.0407, 0.0630, 0.0852, 0.1090, 0.1320, 0.1540, 0.1626, 0.1550, 0.1320, 0.1090, 0.0860, 
    0.0630, 0.0400, 0.0232, 0.0123, 0.0082, 0.0042, 0.0012, 0, 0, 0, -0.0002, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0 ]

def create_plot(signal):
    plt.figure()
    plt.plot(signal, label='ECG Signal')
    plt.xlabel('Sample Number')
    for peakIndex in detect_peak(signal):
        plt.plot(peakIndex, signal[peakIndex], 'ro')
    plt.ylabel('Amplitude')
    plt.show()

def detect_peak(ecg: list[float]) -> list[int]:
    peakThreshold = 0.5
    peaks = []
    for i in range(1, len(ecg) - 1):
        if ecg[i] > ecg[i - 1] and ecg[i] > ecg[i + 1] and ecg[i] > peakThreshold:
            peaks.append(i)
    return peaks


create_plot(ecg2)
